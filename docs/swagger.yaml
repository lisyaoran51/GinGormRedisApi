definitions:
  dto.Response:
    properties:
      message:
        type: string
    type: object
  entity.User:
    properties:
      account:
        description: "ID \t\t\tuint64 `gorm:\"primary_key;auto_increment\" json:\"userId\"`"
        type: string
      createdAt:
        description: "CreatedAt\ttime.Time `json:\"createdAt\"`"
        type: string
      password:
        type: string
      userId:
        type: integer
    type: object
info:
  contact: {}
paths:
  /count:
    post:
      consumes:
      - application/json
      description: count all api calls
      parameters:
      - description: Count
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
      summary: count all api calls
      tags:
      - count
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: List existing users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Create user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Create new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a single user
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Remove users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a single user
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Update users
      tags:
      - users
swagger: "2.0"
